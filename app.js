// app.js
import express from "express";
import fetch from "node-fetch";
import cheerio from "cheerio";
import cors from "cors";

const app = express();
app.use(cors());
app.use(express.json());

// === –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è ===
const PORT = process.env.PORT || 3000;
const SOURCE_URL = "https://adilet.zan.kz/rus/docs/K2500000214?lang=rus";

let sections = [];
let loaded = false;

// === –§—É–Ω–∫—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –ù–∞–ª–æ–≥–æ–≤–æ–≥–æ –∫–æ–¥–µ–∫—Å–∞ ===
async function loadTaxCode() {
  console.log("‚è≥ –ó–∞–≥—Ä—É–∑–∫–∞ –ù–∞–ª–æ–≥–æ–≤–æ–≥–æ –∫–æ–¥–µ–∫—Å–∞ –†–ö 2025 —Å Adilet...");
  try {
    const res = await fetch(SOURCE_URL);
    const html = await res.text();
    const $ = cheerio.load(html);

    sections = [];
    let current = null;

    $("p").each((i, el) => {
      const text = $(el).text().trim();

      if (text.startsWith("–°—Ç–∞—Ç—å—è")) {
        // –Ω–æ–≤–∞—è —Å—Ç–∞—Ç—å—è
        if (current) sections.push(current);
        current = {
          id: sections.length + 1,
          title: text,
          text: ""
        };
      } else if (current) {
        current.text += " " + text;
      }
    });

    if (current) sections.push(current);
    loaded = true;

    console.log(`‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${sections.length} —Å—Ç–∞—Ç–µ–π –∏–∑ –ù–∞–ª–æ–≥–æ–≤–æ–≥–æ –∫–æ–¥–µ–∫—Å–∞.`);
  } catch (err) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫–æ–¥–µ–∫—Å–∞:", err);
  }
}

// === –≠–Ω–¥–ø–æ–∏–Ω—Ç—ã API ===

// –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è
app.get("/health", (req, res) => {
  res.json({
    status: loaded ? "ok" : "loading",
    sections: sections.length,
    sources: 1
  });
});

// –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Å—Ç–∞—Ç–µ–π (—Ç–æ–ª—å–∫–æ –∑–∞–≥–æ–ª–æ–≤–∫–∏)
app.get("/debug/titles", (req, res) => {
  res.json({
    count: sections.length,
    titles: sections.map(s => ({
      id: s.id,
      title: s.title
    }))
  });
});

// –ü–æ–∏—Å–∫ –ø–æ —Å—Ç–∞—Ç—å—è–º
app.post("/search", (req, res) => {
  const q = (req.body.query || "").toLowerCase();
  const limit = req.body.limit || 5;

  if (!q) {
    return res.status(400).json({ error: "–ù–µ —É–∫–∞–∑–∞–Ω –ø–∞—Ä–∞–º–µ—Ç—Ä 'query'." });
  }

  const results = sections.filter(
    s => s.title.toLowerCase().includes(q) || s.text.toLowerCase().includes(q)
  );

  res.json({
    results: results.slice(0, limit).map(s => ({
      id: s.id,
      title: s.title,
      text: s.text.slice(0, 500) + "...",
      url: `${SOURCE_URL}#${s.id}`
    }))
  });
});

// –ü–æ–ª—É—á–∏—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é —Å—Ç–∞—Ç—å—é –ø–æ ID
app.get("/section", (req, res) => {
  const id = parseInt(req.query.id);
  if (!id) return res.status(400).json({ error: "–£–∫–∞–∂–∏—Ç–µ ?id=" });

  const section = sections.find(s => s.id === id);
  if (!section) return res.status(404).json({ error: "–°—Ç–∞—Ç—å—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞." });

  res.json(section);
});

// –†—É—á–Ω–∞—è –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ (–ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∏—Å—Ç–æ—á–Ω–∏–∫–∞)
app.get("/reload", async (req, res) => {
  await loadTaxCode();
  res.json({ reloaded: true, sections: sections.length });
});

// –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
app.get("/", (req, res) => {
  res.send(`
    <h2>TaxCode API 2025</h2>
    <p>–ò—Å—Ç–æ—á–Ω–∏–∫: <a href="${SOURCE_URL}" target="_blank">${SOURCE_URL}</a></p>
    <ul>
      <li>GET /health ‚Äî —Å–æ—Å—Ç–æ—è–Ω–∏–µ API</li>
      <li>POST /search ‚Äî –ø–æ–∏—Å–∫ –ø–æ —Å—Ç–∞—Ç—å—è–º</li>
      <li>GET /section?id=xx ‚Äî —Ç–µ–∫—Å—Ç —Å—Ç–∞—Ç—å–∏</li>
      <li>GET /debug/titles ‚Äî —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Å—Ç–∞—Ç–µ–π</li>
      <li>GET /reload ‚Äî –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å –±–∞–∑—É –≤—Ä—É—á–Ω—É—é</li>
    </ul>
  `);
});

// === –ó–∞–ø—É—Å–∫ ===
app.listen(PORT, async () => {
  console.log(`üöÄ TaxCode API –¥–æ—Å—Ç—É–ø–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);
  await loadTaxCode();
});
